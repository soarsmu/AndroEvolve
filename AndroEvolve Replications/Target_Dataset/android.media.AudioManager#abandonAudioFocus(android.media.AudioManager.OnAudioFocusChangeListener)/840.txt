package ru.startandroid.p1281_audiofocus;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;

import java.io.IOException;

public class MainActivity extends AppCompatActivity implements MediaPlayer.OnCompletionListener {

    final static String LOG_TAG = "myLogs";

    AudioManager audioManager;

    AFListener afListenerMusic;
    AFListener afListenerSound;

    MediaPlayer mpMusic;
    MediaPlayer mpSound;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //получаем AM, через него будем получать фокус
        audioManager = (AudioManager)getSystemService(Context.AUDIO_SERVICE);
    }

    public void onClickMusic(View view){
        mpMusic = MediaPlayer.create(this, R.raw.dabro);
        //устанавливаем Активити как получателя уведомления об окончании воспроизвения
        mpMusic.setOnCompletionListener(this);

        //слушатель, который будет получать сообщения о потере/восстановлении фокуса
        afListenerMusic = new AFListener(mpMusic, "Music");
        //фокус запрашивается с помощью метода requestAudioFocus
        // (слушатель кот-й будет получать сообщения о фокусе, тип потока, тип фокуса)
        int requestResult = audioManager.requestAudioFocus(afListenerMusic,
                AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);
        Log.d(LOG_TAG, "Music request focus, result: " + requestResult);
        mpMusic.start();
    }

    public void onClickSound(View view){
        int durationHint = AudioManager.AUDIOFOCUS_GAIN;//долгое воспр-е,
        // текущее воспр-е должно ост-ся
        switch (view.getId()){
            case R.id.btnPlaySoundG:
                durationHint = AudioManager.AUDIOFOCUS_GAIN;
                break;
            case R.id.btnPlaySoundGT: //короткое воспр-е, текущее должно остановиться на это время
                durationHint = AudioManager.AUDIOFOCUS_GAIN_TRANSIENT;
                break;
            case R.id.btnPlaySoundGTD://короткое воспр-е, текущее просто убавляет звук
                durationHint = AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK;
                break;
        }

        mpSound = MediaPlayer.create(this, R.raw.explosion);
        //присваиваем слушателя окончания воспроизведения
        mpSound.setOnCompletionListener(this);

        afListenerSound = new AFListener(mpSound, "Sound");
        //запрашиваем фокус, который определили нажатием кнопки
        int requestResult = audioManager.requestAudioFocus(afListenerSound,
                AudioManager.STREAM_MUSIC, durationHint);
        Log.d(LOG_TAG, "Sound request focus, result: " + requestResult);

        mpSound.start();
    }

    //сработает по окончании воспроизведения
    @Override
    public void onCompletion(MediaPlayer mp) {
        //определяем какой именно МР закончил играть
        if(mp == mpMusic){
            Log.d(LOG_TAG, "Music: abandon focus");
            //сообщаем системе что больше не претендуем на аудио фокус
            audioManager.abandonAudioFocus(afListenerMusic);
        } else if(mp == mpSound){
            Log.d(LOG_TAG, "Sound: abandon focus");
            audioManager.abandonAudioFocus(afListenerSound);
        }
    }

    //освобождаем ресурсы и отпускаем фокус
    @Override
    protected void onDestroy(){
        super.onDestroy();
        if(mpMusic != null)
            mpMusic.release();
        if(mpSound != null)
            mpSound.release();
        if(afListenerMusic != null)
            audioManager.abandonAudioFocus(afListenerMusic);
        if(afListenerSound != null)
            audioManager.abandonAudioFocus(afListenerSound);
    }

    //класс полуает сообщение о потрере / восстановлении фокуса
    class AFListener implements AudioManager.OnAudioFocusChangeListener{

        String label = " ";
        MediaPlayer mp;

        public AFListener(MediaPlayer mp, String label){
            this.label = label;
            this.mp = mp;
        }

        @Override
        public void onAudioFocusChange(int focusChange) {
            String event = "";
            switch (focusChange){
                case AudioManager.AUDIOFOCUS_LOSS:
                    event = "AUDIOFOCUS_LOSS";
                    mp.pause();
                    break;
                case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
                    event = "AUDIOFOCUS_LOSS_TRANSIENT";
                    mp.pause();
                    break;
                case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
                    event = "AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK";
                    mp.setVolume(0.5f, 0.5f);
                    break;
                    //другое приложение закончило воспроизведение, звук снова наш
                case AudioManager.AUDIOFOCUS_GAIN:
                    event = "AUDIOFOCUS_GAIN";
                    //если плеер был приостановлен, возобновляем проигрывание
                    if(!mp.isPlaying()) mp.start();
                    //ставим громкость на всю
                    mp.setVolume(1.0f, 1.0f);
                    break;
            }
            Log.d(LOG_TAG, label + " onAudioFocusChange: " + event);

        }
    }
}
